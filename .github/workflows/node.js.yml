# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs
name: Node.js CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Use Node.js 20.9.0
      uses: actions/setup-node@v4
      with:
        node-version: 20.9.0
        cache: 'npm'

    - run: npm ci

    - name: Install PostgreSQL
      run: |
        sudo apt-get update
        sudo apt-get install -y postgresql postgresql-contrib

    - name: Start PostgreSQL service
      run: sudo service postgresql start

    - name: Setup PostgreSQL Database
      run: |
        sudo -u postgres psql -c "CREATE DATABASE aranto;"
        sudo -u postgres psql -c "CREATE USER myuser WITH PASSWORD 'mypassword';"
        sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE aranto TO myuser;"

    - name: Run database migrations
      env:
        DATABASE_URL: postgres://myuser:mypassword@localhost:5432/aranto
      run: |
        npx sequelize-cli db:migrate # Ajusta este comando según tu herramienta de migración
        # Si usas otro ORM o herramienta, reemplaza este comando con el adecuado

    - run: npm run build --if-present
    - run: npm test

    - name: Deploy to Server
      env:
        TOKEN_SECRET: ${{ secrets.TOKEN_SECRET }}
        REFRESH_TOKEN_SECRET: ${{ secrets.REFRESH_TOKEN_SECRET }}
        ACCESS_TOKEN_SECRET: ${{ secrets.ACCESS_TOKEN_SECRET }}
      run: ssh user@server "cd /path/to/app && git pull && npm install && npm run build"
